type AwsProvisionerWorkerTypeLaunchSpec {
  ImageId: ID!
}

input AwsProvisionerWorkerTypeLaunchSpecInput {
  ImageId: ID!
}

type AwsProvisionerWorkerTypeInstanceType {
  instanceType: String!
  capacity: Int!
  utility: Float!
  launchSpec: AwsProvisionerWorkerTypeLaunchSpec!
  secrets: JSON!
  userData: JSON!
  scopes: [String]!
}

input AwsProvisionerWorkerTypeInstanceTypeInput {
  instanceType: String!
  capacity: Int!
  utility: Float!
  launchSpec: AwsProvisionerWorkerTypeLaunchSpecInput!
  secrets: JSON!
  userData: JSON!
  scopes: [String]!
}

type AwsProvisionerWorkerTypeRegion {
  region: String!
  launchSpec: AwsProvisionerWorkerTypeLaunchSpec!
  secrets: JSON!
  userData: JSON!
  scopes: [String]!
}

input AwsProvisionerWorkerTypeRegionInput {
  region: String!
  launchSpec: AwsProvisionerWorkerTypeLaunchSpecInput!
  secrets: JSON!
  userData: JSON!
  scopes: [String]!
}

type AwsProvisionerWorkerTypeAvailabilityZone {
  availabilityZone: String!
  region: String
  launchSpec: AwsProvisionerWorkerTypeLaunchSpec!
  secrets: JSON
  userData: JSON
}

input AwsProvisionerWorkerTypeAvailabilityZoneInput {
  availabilityZone: String!
  region: String
  launchSpec: AwsProvisionerWorkerTypeLaunchSpecInput!
  secrets: JSON
  userData: JSON
}

type AwsProvisionerWorkerType {
  workerType: String!
  launchSpec: AwsProvisionerWorkerTypeLaunchSpec!
  description: String!
  owner: String!
  secrets: JSON!
  userData: JSON!
  scopes: [String]!
  minCapacity: Int!
  maxCapacity: Int!
  scalingRatio: Float!
  minPrice: Float!
  maxPrice: Float!
  canUseOnDemand: Boolean
  canUseSpot: Boolean
  lastModified: DateTime!
  instanceTypes: [AwsProvisionerWorkerTypeInstanceType]!
  regions: [AwsProvisionerWorkerTypeRegion]!
  availabilityZones: [AwsProvisionerWorkerTypeAvailabilityZone]

  state(workerType: String = workerType): AwsProvisionerWorkerTypeState
}

type AwsProvisionerWorkerTypeSummary {
  workerType: String!
  minCapacity: Int!
  maxCapacity: Int!
  requestedCapacity: Int!
  pendingCapacity: Int!
  runningCapacity: Int!
}

type AwsProvisionerWorkerTypeState {
  workerType: String!
  instances: [AwsProvisionerWorkerTypeInstanceType]!
  requests: [JSON]
  internalTrackedRequests: [JSON]
  summary: AwsProvisionerWorkerTypeSummary
}

input AwsProvisionerWorkerTypeInput {
  launchSpec: AwsProvisionerWorkerTypeLaunchSpecInput!
  description: String!
  owner: String!
  secrets: JSON!
  userData: JSON!
  scopes: [String!]!
  minCapacity: Int
  maxCapacity: Int!
  scalingRatio: Float!
  minPrice: Float!
  maxPrice: Float!
  canUseOnDemand: Boolean
  canUseSpot: Boolean
  instanceTypes: [AwsProvisionerWorkerTypeInstanceTypeInput!]!
  regions: [AwsProvisionerWorkerTypeRegionInput!]!
  availabilityZones: [AwsProvisionerWorkerTypeAvailabilityZoneInput]
}

extend type Query {
  awsProvisionerWorkerTypeSummaries(filter: JSON): [AwsProvisionerWorkerTypeSummary]
  awsProvisionerWorkerType(workerType: String!): AwsProvisionerWorkerType
  awsProvisionerWorkerTypeState(workerType: String!): AwsProvisionerWorkerTypeState
}

extend type Mutation {
  createAwsProvisionerWorkerType(workerType: String!, payload: AwsProvisionerWorkerTypeInput!): AwsProvisionerWorkerType
  updateAwsProvisionerWorkerType(workerType: String!, payload: AwsProvisionerWorkerTypeInput!): AwsProvisionerWorkerType
  deleteAwsProvisionerWorkerType(workerType: String!): String
}
